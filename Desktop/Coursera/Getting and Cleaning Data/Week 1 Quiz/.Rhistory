get rwd
getwd
getwd()
q()
r = rnorm(1000000)
x = matrix(r, nrow=1000, ncol=1000)
x
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y)
x <<- y
m <<- NULL
}
get <- function() x
setinverse <-  function(inverse) m <<- inverse
getinverse<- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
inverse <-x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
## Return a matrix that is the inverse of 'x'
data <- x$get()
m <- mean(data,...)
x$setmean(inverse)
inverse
}
r = rnorm(1000000)
x = matrix(r, nrow=1000, ncol=1000)
makeCacheMatrix(x)
r = rnorm(1000000)
x = matrix(r, nrow=1000, ncol=1000)
makeCacheMatrix(x)
cacheSolve <- function(x) {
inverse <-x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
## Return a matrix that is the inverse of 'x'
data <- x$get()
m <- mean(data,...)
x$setmean(inverse)
return(inverse)
}
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y)
x <<- y
m <<- NULL
}
get <- function() x
setinverse <-  function(inverse) m <<- inverse
getinverse<- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
inverse <-x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
## Return a matrix that is the inverse of 'x'
data <- x$get()
inverse <- solve(data, ...)
x$setmean(inverse)
return(inverse)
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y)
x <<- y
m <<- NULL
}
get <- function() x
setinverse <-  function(inverse) m <<- inverse
getinverse<- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <-  function(inverse) m <<- inverse
getinverse<- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x) {
inverse <-x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
## Return a matrix that is the inverse of 'x'
data <- x$get()
inverse <- solve(data, ...)
x$setmean(inverse)
return(inverse)
}
r = rnorm(1000000)
x = matrix(r, nrow=1000, ncol=1000)
makeCacheMatrix(x)
v <- makeVector(1:20)   # Create v from makeVector, then v will be a list of 4 functions
cachemean(v)            # Let v be parameter to cachemean - no mean, calc mean and returning
cachemean(v)            # Call it again, getting the cached mean
v <- makeVector(1:20)   # Create v from makeVector, then v will be a list of 4 functions
makeCacheMatrix(v)            # Let v be parameter to cachemean - no mean, calc mean and returning
cacheSolve(v)
x <- makeVector(1:20)   # Create v from makeVector, then v will be a list of 4 functions
makeCacheMatrix(x)            # Let v be parameter to cachemean - no mean, calc mean and returning
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <-  function(inverse) inverse <<- inverse
getinverse<- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
inverse <-x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
## Return a matrix that is the inverse of 'x'
data <- x$get()
inverse <- solve(data, ...)
x$setmean(inverse)
return(inverse)
}
x <- makeVector(1:20)   # Create v from makeVector, then v will be a list of 4 functions
makeCacheMatrix(x)            # Let v be parameter to cachemean - no mean, calc mean and returning
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <-  function(inverse) i <<- inverse
getinverse<- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
i <-x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
## Return a matrix that is the inverse of 'x'
data <- x$get()
i <- solve(data, ...)
x$setmean(i)
return(i)
}
x <- makeVector(1:20)   # Create v from makeVector, then v will be a list of 4 functions
makeCacheMatrix(x)            # Let v be parameter to cachemean - no mean, calc mean and returning
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <-  function(solve) i <<- inverse
getinverse<- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
i <-x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
## Return a matrix that is the inverse of 'x'
data <- x$get()
i <- solve(data, ...)
x$setmean(i)
return(i)
}
x <- makeVector(1:20)   # Create v from makeVector, then v will be a list of 4 functions
makeCacheMatrix(x)            # Let v be parameter to cachemean - no mean, calc mean and returning
cacheSolve(x)
library(datasets)
data(iris)
iris
apply(iris[,1:4],1,mean)
apply(iris, 1,mean)
colMeans(iris)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
mtcars
mean(mtcars$mpg,mtcars$cyl)
tapply(mtcars$cyl,mtcars$mpg,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
debug(ls)
ls(x)
?debug
fksdlf
?debug
c
c
library(datasets)
data(mtcars)
sapply(mtcars,cyl,mean)
lapply(mtcars,mean)
with(mtcars,tapply(mpg,cyl,mean))
apply(mtcars,2,mean)
with(mtcars,tapply(hp,cyl,mean))
sapply(split(mtcars$mpg,mtcars$cyl),mean)
set.seed(1)
rpois(5,2)
?dpois
?rpois
?qpois
?ppois
?qpois
set.seed(10)
x<-rep(0:1,each = 5)
x
e<-rnorm(10,0,20)
y<-0.5+2*x+e
y
?nrom
?rnorm
dbinom
?dbinom
library(datasets)
Rprof()
fit<-lm(y~x1+x2)
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<- read.csv("path2csv",stringsAsFactors = FALSE)
mydf<- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<- tbldf(mydf)
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran,country:r_arch)
cran\
cran
select(cran,-time)
select(cran,-X:size)
select(cran,-X:-size)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package == 'swirl')
filter(cran,r_version == "3.1.1",country == "US")
?Comparison
filter(cran,r_version <= "3.0.2",country == "IN")
filter(cran,country == "US")
filter(cran, country == "US"|country == "IN")
filter(cran,size > 100500, r_os == "llinux-gnu")
filter(cran,size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(c(3,5,NA,10)))
filter(cran,!is.na(cran))
filter(cran,!is.na(r_version))
cran2<- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3,size_mb = size/2^20, size_gb = size_mb/2^10, correct_size = size-1000)
mutate(cran3,correct_size = size+1000)
summarize(cran,avg_bytes = mean(size))
library(swril)
library(swirl)
sworl
swirl()
2
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
Data<- xmlTreeParse(fileURL,useInternal=true)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
Data<- xmlTreeParse(fileURL,useInternal=true)
fileURL
data
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
Data<- xmlTreeParse(fileURL,useInternal=true)
Data<- xmlTreeParse(fileURL,useInternal=TRUE)
DATA
Data
setwd('C:/Users/kdavison/Desktop/Coursera/Getting and Cleaning Data/Week 1 Quiz')
read.csv('getdata-data-ss06hid (1).csv')
data<-read.csv('getdata-data-ss06hid (1).csv')
data[1,2]
library(data.table)
library('data.table')
?data.table
download.file('https://class.coursera.org/getdata-030/forum/thread?thread_id=13')
?download.file
download.file('https://class.coursera.org/getdata-030/forum/thread?thread_id=13',".Questoin1.csv",method = "curl")
download.file('https://class.coursera.org/getdata-030/forum/thread?thread_id=13',".Question1.csv",method = "curl")
Question1
download.file('https://class.coursera.org/getdata-030/forum/thread?thread_id=13',".Question1.csv",method = "curl")
download.file('http://class.coursera.org/getdata-030/forum/thread?thread_id=13',".Question1.csv",method = "curl")
fileURL <- 'https://class.coursera.org/getdata-030/forum/thread?thread_id=13'
download.file(fileURL,destfile="./Question1.csv",method = "curl")
download.file(fileURL,destfile="./Question1.csv",method = "curl")
